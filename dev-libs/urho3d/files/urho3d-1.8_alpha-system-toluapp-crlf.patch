diff -urp a/Source/Urho3D/LuaScript/LuaFile.cpp b/Source/Urho3D/LuaScript/LuaFile.cpp
--- a/Source/Urho3D/LuaScript/LuaFile.cpp	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Urho3D/LuaScript/LuaFile.cpp	2020-01-09 22:18:45.794010721 -0800
@@ -32,6 +32,7 @@
 
 extern "C"
 {
+#include <lua5.2/lstate.h>
 #include <lua.h>
 #include <lauxlib.h>
 }
diff -urp a/Source/Urho3D/LuaScript/LuaFunction.cpp b/Source/Urho3D/LuaScript/LuaFunction.cpp
--- a/Source/Urho3D/LuaScript/LuaFunction.cpp	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Urho3D/LuaScript/LuaFunction.cpp	2020-01-09 22:15:04.815613370 -0800
@@ -1,3 +1,6 @@
+#ifndef Mtolua_new
+#define Mtolua_new(EXP) new EXP
+#endif
 //
 // Copyright (c) 2008-2019 the Urho3D project.
 //
@@ -28,7 +31,7 @@
 #include "../LuaScript/LuaScript.h"
 #include "../LuaScript/LuaScriptInstance.h"
 
-#include <toluapp/tolua++.h>
+#include <tolua++.h>
 #include "../LuaScript/ToluaUtils.h"
 
 #include "../DebugNew.h"
diff -urp a/Source/Urho3D/LuaScript/LuaScript.cpp b/Source/Urho3D/LuaScript/LuaScript.cpp
--- a/Source/Urho3D/LuaScript/LuaScript.cpp	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Urho3D/LuaScript/LuaScript.cpp	2020-01-09 22:18:45.794010721 -0800
@@ -1,3 +1,6 @@
+#ifndef Mtolua_new
+#define Mtolua_new(EXP) new EXP
+#endif
 //
 // Copyright (c) 2008-2019 the Urho3D project.
 //
@@ -39,10 +42,12 @@
 
 extern "C"
 {
+#include <lua5.2/lstate.h>
+#include <lua.h>
 #include <lualib.h>
 }
 
-#include <toluapp/tolua++.h>
+#include <tolua++.h>
 #include "../LuaScript/ToluaUtils.h"
 
 #include "../DebugNew.h"
@@ -338,7 +343,7 @@ void LuaScript::RegisterLoader()
     lua_getfield(luaState_, -1, "loaders");
 
     // Add LuaScript::Loader to the end of the table
-    lua_pushinteger(luaState_, lua_objlen(luaState_, -1) + 1);
+    lua_pushinteger(luaState_, lua_rawlen(luaState_, -1) + 1);
     lua_pushcfunction(luaState_, &LuaScript::Loader);
     lua_settable(luaState_, -3);
     lua_pop(luaState_, 2);
@@ -383,7 +388,7 @@ int LuaScript::Loader(lua_State* L)
 
 void LuaScript::ReplacePrint()
 {
-    static const struct luaL_reg reg[] =
+    static const struct luaL_Reg reg[] =
     {
         {"print", &LuaScript::Print},
         {nullptr, nullptr}
diff -urp a/Source/Urho3D/LuaScript/LuaScriptInstance.cpp b/Source/Urho3D/LuaScript/LuaScriptInstance.cpp
--- a/Source/Urho3D/LuaScript/LuaScriptInstance.cpp	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Urho3D/LuaScript/LuaScriptInstance.cpp	2020-01-09 22:18:45.784010342 -0800
@@ -1,3 +1,6 @@
+#ifndef Mtolua_new
+#define Mtolua_new(EXP) new EXP
+#endif
 //
 // Copyright (c) 2008-2019 the Urho3D project.
 //
@@ -39,7 +42,13 @@
 #include "../Scene/Scene.h"
 #include "../Scene/SceneEvents.h"
 
-#include <toluapp/tolua++.h>
+extern "C" {
+#include <lua5.2/lstate.h>
+#include <lua.h>
+}
+#include <tolua++.h>
+
+
 #include "../LuaScript/ToluaUtils.h"
 
 #include "../DebugNew.h"
@@ -527,7 +536,7 @@ void LuaScriptInstance::GetScriptAttribu
     Vector<String> names;
     if (lua_istable(luaState_, -1))
     {
-        size_t length = lua_objlen(luaState_, -1);
+        size_t length = lua_rawlen(luaState_, -1);
         for (size_t i = 1; i <= length; ++i)
         {
             lua_pushinteger(luaState_, (int)i);
diff -urp a/Source/Urho3D/LuaScript/ToluaUtils.cpp b/Source/Urho3D/LuaScript/ToluaUtils.cpp
--- a/Source/Urho3D/LuaScript/ToluaUtils.cpp	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Urho3D/LuaScript/ToluaUtils.cpp	2020-01-09 22:18:45.784010342 -0800
@@ -1,3 +1,6 @@
+#ifndef Mtolua_new
+#define Mtolua_new(EXP) new EXP
+#endif
 //
 // Copyright (c) 2008-2019 the Urho3D project.
 //
@@ -28,7 +31,13 @@
 #endif
 #include "../IO/VectorBuffer.h"
 
-#include <toluapp/tolua++.h>
+extern "C" {
+#include <lua5.2/lstate.h>
+#include <lua.h>
+}
+#include <tolua++.h>
+
+
 
 #include "../LuaScript/ToluaUtils.h"
 
@@ -54,7 +63,7 @@ Context* GetContext(lua_State* L)
     lua_getglobal(L, ".context");
     if (lua_isnil(L, -1))
     {
-        lua_State* L1 = lua_getmainthread(L);
+        lua_State* L1 = L->l_G->mainthread;
         return (L == L1) ? nullptr : GetContext(L1);
     }
     tolua_Error error;      // Ensure we are indeed getting a Context object before casting
@@ -74,7 +83,7 @@ template <> void* ToluaToVector<String>(
         return nullptr;
     static Vector<String> result;
     result.Clear();
-    result.Resize((unsigned)lua_objlen(L, narg));
+    result.Resize((unsigned)lua_rawlen(L, narg));
     for (unsigned i = 0; i < result.Size(); ++i)
     {
         lua_rawgeti(L, narg, i + 1);
@@ -109,7 +118,7 @@ template <> void* ToluaToPODVector<bool>
         return nullptr;
     static PODVector<bool> result;
     result.Clear();
-    result.Resize((unsigned)lua_objlen(L, narg));
+    result.Resize((unsigned)lua_rawlen(L, narg));
     for (unsigned i = 0; i < result.Size(); ++i)
     {
         lua_rawgeti(L, narg, i + 1);
@@ -139,7 +148,7 @@ template <> void* ToluaToVector<SharedPt
         return nullptr;
     static Vector<SharedPtr<IndexBuffer> > result;
     result.Clear();
-    result.Resize((unsigned)lua_objlen(L, narg));
+    result.Resize((unsigned)lua_rawlen(L, narg));
     for (unsigned i = 0; i < result.Size(); ++i)
     {
         lua_rawgeti(L, narg, i + 1);    // Lua index starts from 1
@@ -155,7 +164,7 @@ template <> void* ToluaToVector<SharedPt
         return nullptr;
     static Vector<SharedPtr<VertexBuffer> > result;
     result.Clear();
-    result.Resize((unsigned)lua_objlen(L, narg));
+    result.Resize((unsigned)lua_rawlen(L, narg));
     for (unsigned i = 0; i < result.Size(); ++i)
     {
         lua_rawgeti(L, narg, i + 1);    // Lua index starts from 1
diff -urp a/Source/Urho3D/LuaScript/ToluaUtils.h b/Source/Urho3D/LuaScript/ToluaUtils.h
--- a/Source/Urho3D/LuaScript/ToluaUtils.h	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Urho3D/LuaScript/ToluaUtils.h	2020-01-09 22:18:45.393995586 -0800
@@ -84,7 +84,7 @@ template <typename T> void* ToluaToVecto
         return nullptr;
     static Vector<T> result;
     result.Clear();
-    result.Resize((unsigned)lua_objlen(L, narg));
+    result.Resize((unsigned)lua_rawlen(L, narg));
     for (unsigned i = 0; i < result.Size(); ++i)
     {
         lua_rawgeti(L, narg, i + 1);    // Lua index starts from 1
@@ -133,7 +133,7 @@ template <typename T> void* ToluaToPODVe
         return nullptr;
     static PODVector<T> result;
     result.Clear();
-    result.Resize((unsigned)lua_objlen(L, narg));
+    result.Resize((unsigned)lua_rawlen(L, narg));
     for (unsigned i = 0; i < result.Size(); ++i)
     {
         lua_rawgeti(L, narg, i + 1);
