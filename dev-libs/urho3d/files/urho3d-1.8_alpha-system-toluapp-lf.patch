diff -urp a/Source/ThirdParty/Lua/src/lapi.c b/Source/ThirdParty/Lua/src/lapi.c
--- a/Source/ThirdParty/Lua/src/lapi.c	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/Lua/src/lapi.c	2020-01-09 22:18:45.403995964 -0800
@@ -366,7 +366,7 @@ LUA_API const char *lua_tolstring (lua_S
 }
 
 
-LUA_API size_t lua_objlen (lua_State *L, int idx) {
+LUA_API size_t lua_rawlen (lua_State *L, int idx) {
   StkId o = index2adr(L, idx);
   switch (ttype(o)) {
     case LUA_TSTRING: return tsvalue(o)->len;
diff -urp a/Source/ThirdParty/Lua/src/lauxlib.c b/Source/ThirdParty/Lua/src/lauxlib.c
--- a/Source/ThirdParty/Lua/src/lauxlib.c	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/Lua/src/lauxlib.c	2020-01-09 22:18:45.403995964 -0800
@@ -328,7 +328,7 @@ LUALIB_API int luaL_getn (lua_State *L,
   lua_pushvalue(L, t);
   lua_rawget(L, -2);
   if ((n = checkint(L, 2)) >= 0) return n;
-  return (int)lua_objlen(L, t);
+  return (int)lua_rawlen(L, t);
 }
 
 #endif
@@ -493,7 +493,7 @@ LUALIB_API int luaL_ref (lua_State *L, i
     lua_rawseti(L, t, FREELIST_REF);  /* (t[FREELIST_REF] = t[ref]) */
   }
   else {  /* no free elements */
-    ref = (int)lua_objlen(L, t);
+    ref = (int)lua_rawlen(L, t);
     ref++;  /* create new reference */
   }
   lua_rawseti(L, t, ref);
diff -urp a/Source/ThirdParty/Lua/src/lauxlib.h b/Source/ThirdParty/Lua/src/lauxlib.h
--- a/Source/ThirdParty/Lua/src/lauxlib.h	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/Lua/src/lauxlib.h	2020-01-09 22:18:45.403995964 -0800
@@ -19,7 +19,7 @@
 LUALIB_API int (luaL_getn) (lua_State *L, int t);
 LUALIB_API void (luaL_setn) (lua_State *L, int t, int n);
 #else
-#define luaL_getn(L,i)          ((int)lua_objlen(L, i))
+#define luaL_getn(L,i)          ((int)lua_rawlen(L, i))
 #define luaL_setn(L,i,j)        ((void)0)  /* no op! */
 #endif
 
diff -urp a/Source/ThirdParty/Lua/src/liolib.c b/Source/ThirdParty/Lua/src/liolib.c
--- a/Source/ThirdParty/Lua/src/liolib.c	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/Lua/src/liolib.c	2020-01-09 22:18:45.413996343 -0800
@@ -299,7 +299,7 @@ static int read_line (lua_State *L, FILE
     char *p = luaL_prepbuffer(&b);
     if (fgets(p, LUAL_BUFFERSIZE, f) == NULL) {  /* eof? */
       luaL_pushresult(&b);  /* close buffer */
-      return (lua_objlen(L, -1) > 0);  /* check whether read something */
+      return (lua_rawlen(L, -1) > 0);  /* check whether read something */
     }
     l = strlen(p);
     if (l == 0 || p[l-1] != '\n')
@@ -327,7 +327,7 @@ static int read_chars (lua_State *L, FIL
     n -= nr;  /* still have to read `n' chars */
   } while (n > 0 && nr == rlen);  /* until end of count or eof */
   luaL_pushresult(&b);  /* close buffer */
-  return (n == 0 || lua_objlen(L, -1) > 0);
+  return (n == 0 || lua_rawlen(L, -1) > 0);
 }
 
 
diff -urp a/Source/ThirdParty/Lua/src/lua.h b/Source/ThirdParty/Lua/src/lua.h
--- a/Source/ThirdParty/Lua/src/lua.h	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/Lua/src/lua.h	2020-01-09 22:18:45.403995964 -0800
@@ -149,7 +149,7 @@ LUA_API lua_Number      (lua_tonumber) (
 LUA_API lua_Integer     (lua_tointeger) (lua_State *L, int idx);
 LUA_API int             (lua_toboolean) (lua_State *L, int idx);
 LUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
-LUA_API size_t          (lua_objlen) (lua_State *L, int idx);
+LUA_API size_t          (lua_rawlen) (lua_State *L, int idx);
 LUA_API lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
 LUA_API void	       *(lua_touserdata) (lua_State *L, int idx);
 LUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);
@@ -261,7 +261,7 @@ LUA_API void lua_setallocf (lua_State *L
 
 #define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
 
-#define lua_strlen(L,i)		lua_objlen(L, (i))
+#define lua_strlen(L,i)		lua_rawlen(L, (i))
 
 #define lua_isfunction(L,n)	(lua_type(L, (n)) == LUA_TFUNCTION)
 #define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
diff -urp a/Source/ThirdParty/LuaJIT/src/host/minilua.c b/Source/ThirdParty/LuaJIT/src/host/minilua.c
--- a/Source/ThirdParty/LuaJIT/src/host/minilua.c	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/LuaJIT/src/host/minilua.c	2020-01-09 22:18:45.443997478 -0800
@@ -170,7 +170,7 @@ typedef ptrdiff_t lua_Integer;
 static void lua_settop(lua_State*L,int idx);
 static int lua_type(lua_State*L,int idx);
 static const char* lua_tolstring(lua_State*L,int idx,size_t*len);
-static size_t lua_objlen(lua_State*L,int idx);
+static size_t lua_rawlen(lua_State*L,int idx);
 static void lua_pushlstring(lua_State*L,const char*s,size_t l);
 static void lua_pushcclosure(lua_State*L,lua_CFunction fn,int n);
 static void lua_createtable(lua_State*L,int narr,int nrec);
@@ -178,7 +178,7 @@ static void lua_setfield(lua_State*L,int
 #define lua_pop(L,n)lua_settop(L,-(n)-1)
 #define lua_newtable(L)lua_createtable(L,0,0)
 #define lua_pushcfunction(L,f)lua_pushcclosure(L,(f),0)
-#define lua_strlen(L,i)lua_objlen(L,(i))
+#define lua_strlen(L,i)lua_rawlen(L,(i))
 #define lua_isfunction(L,n)(lua_type(L,(n))==6)
 #define lua_istable(L,n)(lua_type(L,(n))==5)
 #define lua_isnil(L,n)(lua_type(L,(n))==0)
@@ -5490,7 +5490,7 @@ o=index2adr(L,idx);
 if(len!=NULL)*len=tsvalue(o)->len;
 return svalue(o);
 }
-static size_t lua_objlen(lua_State*L,int idx){
+static size_t lua_rawlen(lua_State*L,int idx){
 StkId o=index2adr(L,idx);
 switch(ttype(o)){
 case 4:return tsvalue(o)->len;
@@ -5832,7 +5832,7 @@ setuvalue(L,L->top,u);
 api_incr_top(L);
 return u+1;
 }
-#define luaL_getn(L,i)((int)lua_objlen(L,i))
+#define luaL_getn(L,i)((int)lua_rawlen(L,i))
 #define luaL_setn(L,i,j)((void)0)
 typedef struct luaL_Reg{
 const char*name;
@@ -6782,7 +6782,7 @@ size_t l;
 char*p=luaL_prepbuffer(&b);
 if(fgets(p,BUFSIZ,f)==NULL){
 luaL_pushresult(&b);
-return(lua_objlen(L,-1)>0);
+return(lua_rawlen(L,-1)>0);
 }
 l=strlen(p);
 if(l==0||p[l-1]!='\n')
@@ -6808,7 +6808,7 @@ luaL_addsize(&b,nr);
 n-=nr;
 }while(n>0&&nr==rlen);
 luaL_pushresult(&b);
-return(n==0||lua_objlen(L,-1)>0);
+return(n==0||lua_rawlen(L,-1)>0);
 }
 static int g_read(lua_State*L,FILE*f,int first){
 int nargs=lua_gettop(L)-1;
diff -urp a/Source/ThirdParty/LuaJIT/src/lauxlib.h b/Source/ThirdParty/LuaJIT/src/lauxlib.h
--- a/Source/ThirdParty/LuaJIT/src/lauxlib.h	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/LuaJIT/src/lauxlib.h	2020-01-09 22:18:45.453997856 -0800
@@ -15,7 +15,7 @@
 #include "lua.h"
 
 
-#define luaL_getn(L,i)          ((int)lua_objlen(L, i))
+#define luaL_getn(L,i)          ((int)lua_rawlen(L, i))
 #define luaL_setn(L,i,j)        ((void)0)  /* no op! */
 
 /* extra error code for `luaL_load' */
diff -urp a/Source/ThirdParty/LuaJIT/src/lib_aux.c b/Source/ThirdParty/LuaJIT/src/lib_aux.c
--- a/Source/ThirdParty/LuaJIT/src/lib_aux.c	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/LuaJIT/src/lib_aux.c	2020-01-09 22:18:45.453997856 -0800
@@ -270,7 +270,7 @@ LUALIB_API int luaL_ref(lua_State *L, in
     lua_rawgeti(L, t, ref);  /* remove it from list */
     lua_rawseti(L, t, FREELIST_REF);  /* (t[FREELIST_REF] = t[ref]) */
   } else {  /* no free elements */
-    ref = (int)lua_objlen(L, t);
+    ref = (int)lua_rawlen(L, t);
     ref++;  /* create new reference */
   }
   lua_rawseti(L, t, ref);
diff -urp a/Source/ThirdParty/LuaJIT/src/lj_api.c b/Source/ThirdParty/LuaJIT/src/lj_api.c
--- a/Source/ThirdParty/LuaJIT/src/lj_api.c	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/LuaJIT/src/lj_api.c	2020-01-09 22:18:45.453997856 -0800
@@ -500,7 +500,7 @@ LUALIB_API int luaL_checkoption(lua_Stat
   lj_err_argv(L, idx, LJ_ERR_INVOPTM, s);
 }
 
-LUA_API size_t lua_objlen(lua_State *L, int idx)
+LUA_API size_t lua_rawlen(lua_State *L, int idx)
 {
   TValue *o = index2adr(L, idx);
   if (tvisstr(o)) {
diff -urp a/Source/ThirdParty/LuaJIT/src/lua.h b/Source/ThirdParty/LuaJIT/src/lua.h
--- a/Source/ThirdParty/LuaJIT/src/lua.h	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/LuaJIT/src/lua.h	2020-01-09 22:18:45.413996343 -0800
@@ -150,7 +150,7 @@ LUA_API lua_Number      (lua_tonumber) (
 LUA_API lua_Integer     (lua_tointeger) (lua_State *L, int idx);
 LUA_API int             (lua_toboolean) (lua_State *L, int idx);
 LUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
-LUA_API size_t          (lua_objlen) (lua_State *L, int idx);
+LUA_API size_t          (lua_rawlen) (lua_State *L, int idx);
 LUA_API lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
 LUA_API void	       *(lua_touserdata) (lua_State *L, int idx);
 LUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);
@@ -263,7 +263,7 @@ LUA_API void lua_setallocf (lua_State *L
 
 #define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
 
-#define lua_strlen(L,i)		lua_objlen(L, (i))
+#define lua_strlen(L,i)		lua_rawlen(L, (i))
 
 #define lua_isfunction(L,n)	(lua_type(L, (n)) == LUA_TFUNCTION)
 #define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
diff -urp a/Source/ThirdParty/toluapp/src/lib/tolua_is.c b/Source/ThirdParty/toluapp/src/lib/tolua_is.c
--- a/Source/ThirdParty/toluapp/src/lib/tolua_is.c	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/ThirdParty/toluapp/src/lib/tolua_is.c	2020-01-09 22:18:45.413996343 -0800
@@ -342,7 +342,7 @@ TOLUA_API int tolua_isbooleanarray
 	{
 		int i;
 		if (dim == -1)		// Urho3D - auto detect the array size if -1 is given
-			dim = (int)lua_objlen(L, lo);
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
@@ -371,7 +371,7 @@ TOLUA_API int tolua_isnumberarray
 	{
 		int i;
 		if (dim == -1)		// Urho3D - auto detect the array size if -1 is given
-			dim = (int)lua_objlen(L, lo);
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
@@ -400,7 +400,7 @@ TOLUA_API int tolua_isstringarray
 	{
 		int i;
 		if (dim == -1)		// Urho3D - auto detect the array size if -1 is given
-			dim = (int)lua_objlen(L, lo);
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
@@ -429,7 +429,7 @@ TOLUA_API int tolua_istablearray
 	{
 		int i;
 		if (dim == -1)		// Urho3D - auto detect the array size if -1 is given
-			dim = (int)lua_objlen(L, lo);
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
@@ -458,7 +458,7 @@ TOLUA_API int tolua_isuserdataarray
 	{
 		int i;
 		if (dim == -1)		// Urho3D - auto detect the array size if -1 is given
-			dim = (int)lua_objlen(L, lo);
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
@@ -487,7 +487,7 @@ TOLUA_API int tolua_isusertypearray
 	{
 		int i;
 		if (dim == -1)		// Urho3D - auto detect the array size if -1 is given
-			dim = (int)lua_objlen(L, lo);
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
diff -urp a/Source/Urho3D/LuaScript/pkgs/ToCppHook.lua b/Source/Urho3D/LuaScript/pkgs/ToCppHook.lua
--- a/Source/Urho3D/LuaScript/pkgs/ToCppHook.lua	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Urho3D/LuaScript/pkgs/ToCppHook.lua	2020-01-09 22:18:45.774009964 -0800
@@ -87,7 +87,7 @@ function post_output_hook(package)
 // THE SOFTWARE.
 //
 
-#include <toluapp/tolua++.h>
+#include <tolua++.h>
 #include "LuaScript/ToluaUtils.h"
 
 #if __clang__
@@ -214,7 +214,7 @@ end
 -- The checker only checks for single argument function at the moment, but it can be extended to support more when it is necessary
 local overload_checker = {name="", has_number=false}
 function pre_call_hook(self)
-    if table.getn(self.args) ~= 1 then return end
+    if #self.args ~= 1 then return end
     if overload_checker.name ~= self.name then
         overload_checker.name = self.name
         overload_checker.has_number = false
