diff -urp a/CMake/Modules/UrhoCommon.cmake b/CMake/Modules/UrhoCommon.cmake
--- a/CMake/Modules/UrhoCommon.cmake	2019-10-05 21:46:51.000000000 -0700
+++ b/CMake/Modules/UrhoCommon.cmake	2020-01-09 20:37:22.390398271 -0800
@@ -744,6 +744,18 @@ else ()
         endif ()
     endif ()
 endif ()
+if (NOT URHO3D_SYSTEM_NANODBC)
+    if (URHO3D_ODBC)
+        set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DNANODBC_USE_BOOST_CONVERT")
+        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNANODBC_USE_BOOST_CONVERT")
+    endif ()
+endif()
+if (URHO3D_SYSTEM_LUA)
+    if (URHO3D_LUA)
+        list (APPEND INCLUDE_DIRS /usr/include/lua${SYSTEM_LUA_VERSION})
+        add_definitions (-DLUA_COMPAT_MODULE=1)
+    endif ()
+endif ()
 # LuaJIT specific - extra linker flags for linking against LuaJIT (adapted from LuaJIT's original Makefile)
 if (URHO3D_LUAJIT)
     if (URHO3D_64BIT AND APPLE AND NOT ARM)
diff -urp a/Source/Clang-Tools/AutoBinder/CMakeLists.txt b/Source/Clang-Tools/AutoBinder/CMakeLists.txt
--- a/Source/Clang-Tools/AutoBinder/CMakeLists.txt	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Clang-Tools/AutoBinder/CMakeLists.txt	2020-01-09 20:38:17.662537978 -0800
@@ -22,6 +22,7 @@
 
 # Define target name
 set (TARGET_NAME AutoBinder)
+add_definitions (-D__STDC_LIMIT_MACROS=1 -D__STDC_CONSTANT_MACROS=1)
 
 # Define source files
 define_source_files ()
diff -urp a/Source/CMakeLists.txt b/Source/CMakeLists.txt
--- a/Source/CMakeLists.txt	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/CMakeLists.txt	2020-01-09 20:37:22.400398657 -0800
@@ -67,71 +67,133 @@ if (URHO3D_LIB_TYPE STREQUAL SHARED AND
     endif ()
 endif ()
 
+if (URHO3D_FREETYPE AND NOT URHO3D_SYSTEM_FREETYPE)
+    list(THIRD_PARTY_MODULES FreeType)
+endif ()
+
+if (URHO3D_LZ4 AND NOT URHO3D_SYSTEM_LZ4)
+    list(THIRD_PARTY_MODULES LZ4)
+endif ()
+
+if (URHO3D_PUGIXML AND NOT URHO3D_SYSTEM_PUGIXML)
+    list(THIRD_PARTY_MODULES PugiXml)
+endif ()
+
+if (URHO3D_RAPIDJSON AND NOT URHO3D_SYSTEM_RAPIDJSON)
+    list(THIRD_PARTY_MODULES rapidjson)
+endif ()
+
+if (URHO3D_SDL AND NOT URHO3D_SYSTEM_SDL)
+    list(THIRD_PARTY_MODULES SDL)
+endif ()
+
+if (URHO3D_STANHULL AND NOT URHO3D_SYSTEM_STANHULL)
+    list(THIRD_PARTY_MODULES StanHull)
+endif ()
+
+if (URHO3D_STB AND NOT URHO3D_SYSTEM_STB)
+    list(THIRD_PARTY_MODULES STB)
+endif ()
+
 # Add targets
-foreach (TARGET FreeType LZ4 PugiXml rapidjson SDL StanHull STB)
+foreach (TARGET IN LISTS THIRD_PARTY_MODULES)
     add_subdirectory (ThirdParty/${TARGET})
 endforeach ()
 
 if (URHO3D_ANGELSCRIPT)
-    add_subdirectory (ThirdParty/AngelScript)
+    if (NOT URHO3D_SYSTEM_ANGELSCRIPT)
+        add_subdirectory (ThirdParty/AngelScript)
+    endif ()
     if (WEB OR (ARM AND URHO3D_64BIT))
-        add_subdirectory (ThirdParty/boost)
+        if (NOT URHO3D_SYSTEM_BOOST)
+            add_subdirectory (ThirdParty/boost)
+        endif ()
     endif ()
 endif ()
 
 if (URHO3D_LUA)
-    add_subdirectory (ThirdParty/Lua${JIT})
-    add_subdirectory (ThirdParty/toluapp/src/lib)
+    if (NOT URHO3D_SYSTEM_LUAJIT)
+        add_subdirectory (ThirdParty/Lua${JIT})
+    endif ()
+    if (NOT URHO3D_SYSTEM_TOLUAPP)
+        add_subdirectory (ThirdParty/toluapp/src/lib)
+    endif ()
 endif ()
 
 if (URHO3D_NETWORK)
-    add_subdirectory (ThirdParty/Civetweb)
-    add_subdirectory (ThirdParty/SLikeNet)
+    if (NOT URHO3D_SYSTEM_CIVETWEB)
+        add_subdirectory (ThirdParty/Civetweb)
+    endif ()
+    if (NOT URHO3D_SYSTEM_SLIKENET)
+        add_subdirectory (ThirdParty/SLikeNet)
+    endif ()
 endif ()
 
 if (URHO3D_DATABASE_ODBC)
-    add_subdirectory (ThirdParty/nanodbc)
+    if (NOT URHO3D_SYSTEM_NANODBC)
+        add_subdirectory (ThirdParty/nanodbc)
+    endif ()
 endif ()
 if (URHO3D_DATABASE_SQLITE)
-    add_subdirectory (ThirdParty/SQLite)
+    if (NOT URHO3D_SYSTEM_SQLITE)
+        add_subdirectory (ThirdParty/SQLite)
+    endif ()
 endif ()
 
 if (URHO3D_IK)
-    add_subdirectory (ThirdParty/ik)
+    if (NOT URHO3D_SYSTEM_IK)
+        add_subdirectory (ThirdParty/ik)
+    endif ()
 endif ()
 
 if (URHO3D_NAVIGATION)
-    add_subdirectory (ThirdParty/Detour)
-    add_subdirectory (ThirdParty/DetourCrowd)
-    add_subdirectory (ThirdParty/DetourTileCache)
-    add_subdirectory (ThirdParty/Recast)
+    if (NOT URHO3D_SYSTEM_RECASTNAVIGATION)
+        add_subdirectory (ThirdParty/Detour)
+        add_subdirectory (ThirdParty/DetourCrowd)
+        add_subdirectory (ThirdParty/DetourTileCache)
+        add_subdirectory (ThirdParty/Recast)
+    endif ()
 endif ()
 
 if (URHO3D_URHO2D)
-    add_subdirectory (ThirdParty/Box2D)
+    if (NOT URHO3D_SYSTEM_BOX2D)
+        add_subdirectory (ThirdParty/Box2D)
+    endif ()
     if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/spine)
-        add_subdirectory (ThirdParty/spine)
+        if (NOT URHO3D_SYSTEM_SPINE)
+            add_subdirectory (ThirdParty/spine)
+        endif ()
         # Add definition for Spine
         add_definitions (-DURHO3D_SPINE)
     endif ()
 endif ()
 
 if (URHO3D_WEBP)
-    add_subdirectory (ThirdParty/WebP)
+    if (NOT URHO3D_SYSTEM_WEBP)
+        add_subdirectory (ThirdParty/WebP)
+    endif ()
 endif ()
 
 if (URHO3D_PHYSICS)
-    add_subdirectory (ThirdParty/Bullet)
+    if (NOT URHO3D_SYSTEM_BULLET)
+        add_subdirectory (ThirdParty/Bullet)
+    endif ()
 endif ()
 
 if (NOT ANDROID AND NOT ARM AND NOT WEB)
     if (URHO3D_OPENGL)
-        add_subdirectory (ThirdParty/GLEW)
+        if (NOT URHO3D_SYSTEM_GLEW)
+            add_subdirectory (ThirdParty/GLEW)
+        endif ()
     elseif (NOT URHO3D_D3D11)
-        add_subdirectory (ThirdParty/MojoShader)
+        if (NOT URHO3D_SYSTEM_MOJOSHADER)
+            add_subdirectory (ThirdParty/MojoShader)
+        endif ()
     endif ()
     if (NOT CMAKE_SYSTEM_NAME STREQUAL Linux)
-        add_subdirectory (ThirdParty/LibCpuId)
+        if (NOT URHO3D_SYSTEM_LIBCPUID)
+            add_subdirectory (ThirdParty/LibCpuId)
+        endif ()
     endif ()
 endif ()
 
diff -urp a/Source/Tools/AssetImporter/CMakeLists.txt b/Source/Tools/AssetImporter/CMakeLists.txt
--- a/Source/Tools/AssetImporter/CMakeLists.txt	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Tools/AssetImporter/CMakeLists.txt	2020-01-09 20:37:22.420399430 -0800
@@ -27,9 +27,14 @@ set (TARGET_NAME AssetImporter)
 define_source_files ()
 
 # Define dependency libs
-add_subdirectory (../../ThirdParty/Assimp ../../ThirdParty/Assimp)
-set (LIBS Assimp)
-set (INCLUDE_DIRS ../../ThirdParty/Assimp/include ${CMAKE_CURRENT_BINARY_DIR}/../../ThirdParty/Assimp/include)
+if (NOT URHO3D_SYSTEM_ASSIMP)
+    add_subdirectory (../../ThirdParty/Assimp ../../ThirdParty/Assimp)
+    set (LIBS Assimp)
+    set (INCLUDE_DIRS ../../ThirdParty/Assimp/include ${CMAKE_CURRENT_BINARY_DIR}/../../ThirdParty/Assimp/include)
+else ()
+    set (LIBS assimp)
+    set (INCLUDE_DIRS /usr/include/assimp)
+endif ()
 
 # Setup target
 setup_executable (TOOL)
diff -urp a/Source/Tools/PackageTool/CMakeLists.txt b/Source/Tools/PackageTool/CMakeLists.txt
--- a/Source/Tools/PackageTool/CMakeLists.txt	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Tools/PackageTool/CMakeLists.txt	2020-01-09 20:37:22.430399819 -0800
@@ -111,7 +111,11 @@ set (TARGET_NAME PackageTool${POSTFIX})
 define_source_files (EXTRA_CPP_FILES ${MINI_URHO_CPP_FILES})
 
 # Define dependency libs
-list (APPEND LIBS LZ4)
+if (NOT URHO3D_SYSTEM_LZ4)
+    list (APPEND LIBS LZ4)
+else ()
+    list (APPEND LIBS lz4)
+endif ()
 
 # Setup target
 setup_executable (TOOL)
diff -urp a/Source/Urho3D/CMakeLists.txt b/Source/Urho3D/CMakeLists.txt
--- a/Source/Urho3D/CMakeLists.txt	2019-10-05 21:46:51.000000000 -0700
+++ b/Source/Urho3D/CMakeLists.txt	2020-01-09 20:37:22.440400206 -0800
@@ -22,6 +22,11 @@
 
 # Define target name
 set (TARGET_NAME Urho3D)
+if (URHO3D_STATIC)
+    set (CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS}")
+else ()
+    set (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
+endif ()
 
 setup_lint ()
 
@@ -96,6 +101,9 @@ if (URHO3D_LUA)
     if (URHO3D_LUA_RAW_SCRIPT_LOADER)
         add_definitions (-DURHO3D_LUA_RAW_SCRIPT_LOADER)
     endif ()
+    if (URHO3D_SYSTEM_TOLUAPP)
+        add_definitions (-DLUA_COMPAT_MODULE=1)
+    endif ()
 endif ()
 if (ODBC_VERSION AND NOT ODBC_VERSION VERSION_LESS 3)
     add_definitions (-DODBC_3_OR_LATER)
@@ -218,15 +226,19 @@ if (URHO3D_LUA)
         else ()
             set (ALTERNATE_COMMAND CMAKE_COMMAND ${CMAKE_COMMAND} -E env CC=${SAVED_CC} CXX=${SAVED_CXX} CI=$ENV{CI} ${CMAKE_COMMAND})
         endif ()
-        ExternalProject_Add (tolua++
-            SOURCE_DIR ${CMAKE_SOURCE_DIR}/Source/ThirdParty/toluapp/src/bin
-            CMAKE_ARGS -DDEST_RUNTIME_DIR=${CMAKE_BINARY_DIR}/bin/tool -DBAKED_CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR} -DURHO3D_UPDATE_SOURCE_TREE=${URHO3D_UPDATE_SOURCE_TREE} -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}
-            ${TRAVIS_ANDROID_FIX}
-            ${ALTERNATE_COMMAND})
+        if (NOT URHO3D_SYSTEM_TOLUAPP)
+            ExternalProject_Add (tolua++
+                SOURCE_DIR ${CMAKE_SOURCE_DIR}/Source/ThirdParty/toluapp/src/bin
+                CMAKE_ARGS -DDEST_RUNTIME_DIR=${CMAKE_BINARY_DIR}/bin/tool -DBAKED_CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR} -DURHO3D_UPDATE_SOURCE_TREE=${URHO3D_UPDATE_SOURCE_TREE} -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}
+                ${TRAVIS_ANDROID_FIX}
+                ${ALTERNATE_COMMAND})
+        endif ()
         add_make_clean_files (${CMAKE_BINARY_DIR}/bin/tool/tolua++)
     else ()
         # Otherwise, build it internally as per normal
-        add_subdirectory (../ThirdParty/toluapp/src/bin ../ThirdParty/toluapp/src/bin)
+        if (NOT URHO3D_SYSTEM_TOLUAPP)
+            add_subdirectory (../ThirdParty/toluapp/src/bin ../ThirdParty/toluapp/src/bin)
+        endif ()
     endif ()
     # Use the host tool to generate source files for tolua++ API binding
     file (MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/LuaScript/generated)
@@ -243,11 +255,19 @@ if (URHO3D_LUA)
         set (GEN_CPP_FILE LuaScript/generated/${DIR}LuaAPI.cpp)
         list (APPEND GEN_CPP_FILES ${GEN_CPP_FILE})
         file (GLOB PKG_FILES LuaScript/pkgs/${DIR}/*.pkg)
-        add_custom_command (OUTPUT ${GEN_CPP_FILE}
-            COMMAND ${CMAKE_BINARY_DIR}/bin/tool/tolua++ -E ${CMAKE_PROJECT_NAME} -L ToCppHook.lua -o ${CMAKE_CURRENT_BINARY_DIR}/${GEN_CPP_FILE} ${NAME}
-            DEPENDS tolua++ ${API_PKG_FILE} ${PKG_FILES} LuaScript/pkgs/ToCppHook.lua
-            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/LuaScript/pkgs
-            COMMENT "Generating tolua++ API binding on the fly for ${DIR}")
+        if (NOT URHO3D_SYSTEM_TOLUAPP)
+            add_custom_command (OUTPUT ${GEN_CPP_FILE}
+                COMMAND ${CMAKE_BINARY_DIR}/bin/tool/tolua++ -E ${CMAKE_PROJECT_NAME} -L ToCppHook.lua -o ${CMAKE_CURRENT_BINARY_DIR}/${GEN_CPP_FILE} ${NAME}
+                DEPENDS tolua++ ${API_PKG_FILE} ${PKG_FILES} LuaScript/pkgs/ToCppHook.lua
+                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/LuaScript/pkgs
+                COMMENT "Generating tolua++ API binding on the fly for ${DIR}")
+        else ()
+            add_custom_command (OUTPUT ${GEN_CPP_FILE}
+                COMMAND /usr/bin/tolua++ -E ${CMAKE_PROJECT_NAME} -L ToCppHook.lua -o ${CMAKE_CURRENT_BINARY_DIR}/${GEN_CPP_FILE} ${NAME}
+                DEPENDS ${API_PKG_FILE} ${PKG_FILES} LuaScript/pkgs/ToCppHook.lua
+                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/LuaScript/pkgs
+                COMMENT "Generating tolua++ API binding on the fly for ${DIR}")
+        endif ()
     endforeach ()
 endif ()
 
@@ -303,14 +323,25 @@ list (APPEND SOURCE_FILES ${GEN_CPP_FILE
 # Define dependency libs
 # Add include directories to find the precompiled header, export header, and installed headers from third-party libs
 set (INCLUDE_DIRS ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR} ${THIRD_PARTY_INCLUDE_DIR})
+if (URHO3D_SYSTEM_FREETYPE)
+    list (APPEND INCLUDE_DIRS /usr/include /usr/include/freetype2)
+endif ()
 if (URHO3D_PHYSICS)
     # Bullet library depends on its own include dir to be added in the header search path
     # This is more practical than patching its header files in many places to make them work with relative path
-    list (APPEND INCLUDE_DIRS ${THIRD_PARTY_INCLUDE_DIR}/Bullet)
+    if (NOT URHO3D_SYSTEM_BULLET)
+        list (APPEND INCLUDE_DIRS ${THIRD_PARTY_INCLUDE_DIR}/Bullet)
+    else ()
+        list (APPEND INCLUDE_DIRS /usr/include/bullet)
+    endif ()
 endif ()
 if (URHO3D_NAVIGATION)
     # DetourTileCache and DetourCrowd libraries depend on Detour's include dir to be added in the header search path
-    list (APPEND INCLUDE_DIRS ${THIRD_PARTY_INCLUDE_DIR}/Detour)
+    if (NOT URHO3D_SYSTEM_BULLET)
+        list (APPEND INCLUDE_DIRS ${THIRD_PARTY_INCLUDE_DIR}/Detour)
+    else ()
+        list (APPEND INCLUDE_DIRS /usr/include/Detour)
+    endif ()
 endif ()
 if (URHO3D_LUA)
     # Lua/LuaJIT library depends on its own include dir to be added in the header search path
