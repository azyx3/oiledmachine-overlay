# Copyright 1999-2019 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

EAPI=6
inherit dotnet eutils mono gac

DESCRIPTION="C# library for parsing and importing TMX and TSX files generated by Tiled, a tile map generation tool."
HOMEPAGE="https://github.com/marshallward/TiledSharp"
COMMIT="f29fb71591200093fa159f53094b8b8d7fab1d17"
PROJECT_NAME="TiledSharp"
SRC_URI="https://github.com/marshallward/TiledSharp/archive/${COMMIT}.zip -> ${P}.zip"

NETCORE20_NAME="TiledSharp"
NETCORE20_V="1.0.0"

LICENSE="Apache-2.0"
SLOT="0"
KEYWORDS="~amd64 ~x86"
USE_DOTNET="net45 netstandard20"
IUSE="${USE_DOTNET} debug +gac ${PACKAGE_FEATURES} doc"
REQUIRED_USE="|| ( ${USE_DOTNET} ) gac"

RDEPEND=">=dev-lang/mono-4"
DEPEND="${RDEPEND}
        doc? ( app-doc/doxygen )
	>=dev-lang/mono-4
	dev-dotnet/dotnetcore-sdk
"

S="${WORKDIR}/${PROJECT_NAME}-${COMMIT}"
SNK_FILENAME="${S}/${PN}-keypair.snk"
CODECOVERAGE_V="16.3.0-preview-20190808-03"

pkg_pretend() {
	# the sandbox won't allow us to use dotnet restore properly so sandbox restrictions must be dropped
	if has sandbox $FEATURES || has usersandbox $FEATURES || has network-sandbox $FEATURES ; then
		die ".NET core command-line (CLI) tools require sandbox and usersandbox and network-sandbox to be disabled in FEATURES."
	fi
}

src_unpack() {
	unpack ${A}

	cd "${S}"
	dotnet restore || die

	# It must be done this way because the sandbox will remove the ${HOME} folder.  The ${HOME} folder contains the dependencies pulled in the restore phase.
	_src_prepare
	_src_compile
}

_src_prepare() {
	egenkey

	# to fix: The reference assemblies for .NETFramework,Version=v3.5 were not found.
	L=$(find "${S}" -name "*.csproj")
	for f in $L ; do
		cp "${FILESDIR}"/netfx.props "$(dirname $f)" || die
		einfo "Editing $f"
		sed -i -e "s|<Project>|<Project>\n  <Import Project=\"netfx.props\" />\n|g" "$f" || die
		sed -i -e "s|<Project Sdk=\"Microsoft.NET.Sdk\">|<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Import Project=\"netfx.props\" />\n|g" "$f" || die
	done

	# fix error warning see _src_compile reasons why net40 net35 do not work
	sed -i -e "s|netstandard2.0;net35;net40;net45|netstandard2.0;net45|g" TiledSharp/TiledSharp.csproj || die
	sed -i -e "s|netcoreapp2.0;netcoreapp2.1;net35;net40;net45|netcoreapp2.0;netcoreapp2.1;net45|g" TiledSharp.Test/TiledSharp.Test.csproj || die

	#eapply_user
}

_src_compile() {
	mydebug="Release"
	if use debug; then
		mydebug="Debug"
	fi

	local options

	einfo "Building for netcoreapp2.1, netcoreapp2.0, net45"
	if use gac ; then
		options+=( -p:SignAssembly=true -p:AssemblyOriginatorKeyFile=${SNK_FILENAME} )
	fi
	dotnet msbuild -p:Configuration=${mydebug} ${options[@]} || die
	# it will fail building for net40 and net35 because dependencies are not pulled and other reasons
	# it is okay if it errors are produced for those libs

	if use doc ; then
		cd docs
		doxygen Doxyfile
	fi
}

_dotnet_use_to_folder_name() {
	case ${1} in
		*net35*) echo "net35" ;;
		*net40*) echo "net40" ;;
		*net45*) echo "net45" ;;
		*netstandard20*) echo "netstandard2.0" ;;
		*netstandard21*) echo "netstandard2.1" ;;
		*) die "unhandled dotnet version" ;;
	esac
}

src_install() {
	mydebug="Release"
	if use debug; then
		mydebug="Debug"
	fi

        ebegin "Installing dlls into the GAC"

	for x in ${USE_DOTNET} ; do
		if [[ ${x} == *netstandard* ]] ; then
			# todo
	                insinto "/opt/dotnet/shared/${NETCORE20_NAME}/${NETCORE20_V}/"
			doins TiledSharp/bin/Release/$(_dotnet_use_to_folder_name ${x})/{TiledSharp.dll,TiledSharp.deps.json}
			use developer && doins TiledSharp/bin/Release/$(_dotnet_use_to_folder_name ${x})/TiledSharp.pdb
		else
	                insinto "/usr/$(get_libdir)/mono/${PN}/$(_dotnet_use_to_folder_name ${x})"
			doins TiledSharp/bin/Release/$(_dotnet_use_to_folder_name ${x})/TiledSharp.dll
			use developer && doins TiledSharp/bin/Release/$(_dotnet_use_to_folder_name ${x})/TiledSharp.pdb
		fi
	done

	if use gac ; then
		esavekey
	fi

	# fixme different strong sign per net version
	for x in ${USE_DOTNET} ; do
		if [[ ${x} == *netstandard* ]] ; then
			einfo "Skipping ${x} into GAC"
			continue
		fi
		if use gac ; then
			einfo "Installing ${x} into GAC"
			sn -R "${S}/TiledSharp/bin/Release/$(_dotnet_use_to_folder_name ${x})/TiledSharp.dll" "${SNK_FILENAME}" || die
	                egacinstall "${S}/TiledSharp/bin/Release/$(_dotnet_use_to_folder_name ${x})/TiledSharp.dll"
			insinto "/usr/$(get_libdir)/mono/${PN}"
			use developer && doins TiledSharp/bin/Release/$(_dotnet_use_to_folder_name ${x})/TiledSharp.pdb
		fi
                insinto "/usr/$(get_libdir)/mono/${PN}"
		use developer && doins TiledSharp/bin/Release/$(_dotnet_use_to_folder_name ${x})/TiledSharp.pdb
        done
	eend

	use doc && dodoc -r docs/html

	dotnet_multilib_comply
}
