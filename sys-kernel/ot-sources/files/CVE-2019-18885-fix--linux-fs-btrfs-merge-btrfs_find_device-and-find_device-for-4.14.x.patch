Addresses: CVE-2019-18885
Severity: Medium (CVSS 3.x)
URI: https://nvd.nist.gov/vuln/detail/CVE-2019-18885
Author: Anand Jain
Original commit: 09ba3bc9dd150457c506e4661380a6183af651c1
Source: https://github.com/torvalds/linux/commit/09ba3bc9dd150457c506e4661380a6183af651c1
Backport for 4.14.x LTS

Untested

If it breaks, revisit hunk:
@@ -6264,11 +6251,19 @@ struct btrfs_device *btrfs_find_device(s

----
--- a/fs/btrfs/dev-replace.c.orig1	2019-11-30 20:57:29.845656281 -0800
+++ b/fs/btrfs/dev-replace.c	2019-11-30 21:00:54.273617689 -0800
@@ -133,10 +133,10 @@ no_valid_dev_replace_entry_found:
 	case BTRFS_IOCTL_DEV_REPLACE_STATE_STARTED:
 	case BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED:
 		dev_replace->srcdev = btrfs_find_device(fs_info, src_devid,
-							NULL, NULL);
+							NULL, NULL, true);
 		dev_replace->tgtdev = btrfs_find_device(fs_info,
 							BTRFS_DEV_REPLACE_DEVID,
-							NULL, NULL);
+							NULL, NULL, true);
 		/*
 		 * allow 'btrfs dev replace_cancel' if src/tgt device is
 		 * missing
--- a/fs/btrfs/ioctl.c.orig1	2019-11-30 20:57:07.144772184 -0800
+++ b/fs/btrfs/ioctl.c	2019-11-30 21:03:16.479155719 -0800
@@ -1523,7 +1523,7 @@ static noinline int btrfs_ioctl_resize(s
 		btrfs_info(fs_info, "resizing devid %llu", devid);
 	}
 
-	device = btrfs_find_device(fs_info, devid, NULL, NULL);
+	device = btrfs_find_device(fs_info, devid, NULL, NULL, true);
 	if (!device) {
 		btrfs_info(fs_info, "resizer unable to find device %llu",
 			   devid);
@@ -2821,7 +2821,7 @@ static long btrfs_ioctl_dev_info(struct
 		s_uuid = di_args->uuid;
 
 	mutex_lock(&fs_devices->device_list_mutex);
-	dev = btrfs_find_device(fs_info, di_args->devid, s_uuid, NULL);
+	dev = btrfs_find_device(fs_info, di_args->devid, s_uuid, NULL, true);
 
 	if (!dev) {
 		ret = -ENODEV;
--- a/fs/btrfs/scrub.c.orig1	2019-11-30 20:56:01.942232822 -0800
+++ b/fs/btrfs/scrub.c	2019-11-30 21:03:49.700449466 -0800
@@ -4132,7 +4132,7 @@ int btrfs_scrub_dev(struct btrfs_fs_info
 
 
 	mutex_lock(&fs_info->fs_devices->device_list_mutex);
-	dev = btrfs_find_device(fs_info, devid, NULL, NULL);
+	dev = btrfs_find_device(fs_info, devid, NULL, NULL, true);
 	if (!dev || (dev->missing && !is_dev_replace)) {
 		mutex_unlock(&fs_info->fs_devices->device_list_mutex);
 		return -ENODEV;
@@ -4297,7 +4297,7 @@ int btrfs_scrub_progress(struct btrfs_fs
 	struct scrub_ctx *sctx = NULL;
 
 	mutex_lock(&fs_info->fs_devices->device_list_mutex);
-	dev = btrfs_find_device(fs_info, devid, NULL, NULL);
+	dev = btrfs_find_device(fs_info, devid, NULL, NULL, true);
 	if (dev)
 		sctx = dev->scrub_device;
 	if (sctx)
--- a/fs/btrfs/volumes.c.orig1	2019-11-30 20:57:34.975856079 -0800
+++ b/fs/btrfs/volumes.c	2019-11-30 21:42:26.300752718 -0800
@@ -253,28 +253,6 @@ static struct btrfs_device *__alloc_devi
 	return dev;
 }
 
-/*
- * Find a device specified by @devid or @uuid in the list of @fs_devices, or
- * return NULL.
- *
- * If devid and uuid are both specified, the match must be exact, otherwise
- * only devid is used.
- */
-static struct btrfs_device *find_device(struct btrfs_fs_devices *fs_devices,
-		u64 devid, const u8 *uuid)
-{
-	struct list_head *head = &fs_devices->devices;
-	struct btrfs_device *dev;
-
-	list_for_each_entry(dev, head, dev_list) {
-		if (dev->devid == devid &&
-		    (!uuid || !memcmp(dev->uuid, uuid, BTRFS_UUID_SIZE))) {
-			return dev;
-		}
-	}
-	return NULL;
-}
-
 static noinline struct btrfs_fs_devices *find_fsid(u8 *fsid)
 {
 	struct btrfs_fs_devices *fs_devices;
@@ -629,8 +607,8 @@ static noinline int device_list_add(cons
 
 		device = NULL;
 	} else {
-		device = find_device(fs_devices, devid,
-				disk_super->dev_item.uuid);
+		device = btrfs_find_device(fs_devices, devid,
+				disk_super->dev_item.uuid, NULL, false);
 	}
 
 	if (!device) {
@@ -2115,7 +2093,7 @@ static int btrfs_find_device_by_path(str
 	disk_super = (struct btrfs_super_block *)bh->b_data;
 	devid = btrfs_stack_device_id(&disk_super->dev_item);
 	dev_uuid = disk_super->dev_item.uuid;
-	*device = btrfs_find_device(fs_info, devid, dev_uuid, disk_super->fsid);
+	*device = btrfs_find_device(fs_info, devid, dev_uuid, disk_super->fsid, true);
 	brelse(bh);
 	if (!*device)
 		ret = -ENOENT;
@@ -2164,7 +2142,7 @@ int btrfs_find_device_by_devspec(struct
 
 	if (devid) {
 		ret = 0;
-		*device = btrfs_find_device(fs_info, devid, NULL, NULL);
+		*device = btrfs_find_device(fs_info, devid, NULL, NULL, true);
 		if (!*device)
 			ret = -ENOENT;
 	} else {
@@ -2296,7 +2274,7 @@ next_slot:
 				   BTRFS_UUID_SIZE);
 		read_extent_buffer(leaf, fs_uuid, btrfs_device_fsid(dev_item),
 				   BTRFS_FSID_SIZE);
-		device = btrfs_find_device(fs_info, devid, dev_uuid, fs_uuid);
+		device = btrfs_find_device(fs_info, devid, dev_uuid, fs_uuid, true);
 		BUG_ON(!device); /* Logic error */
 
 		if (device->fs_devices->seeding) {
@@ -6254,8 +6232,17 @@ blk_status_t btrfs_map_bio(struct btrfs_
 	return BLK_STS_OK;
 }
 
+/*
+ * Find a device specified by @devid or @uuid in the list of @fs_devices, or
+ * return NULL.
+ *
+ * If devid and uuid are both specified, the match must be exact, otherwise
+ * only devid is used.
+ *
+ * If @seed is true, traverse through the seed devices.
+ */
 struct btrfs_device *btrfs_find_device(struct btrfs_fs_info *fs_info, u64 devid,
-				       u8 *uuid, u8 *fsid)
+				       u8 *uuid, u8 *fsid, bool seed)
 {
 	struct btrfs_device *device;
 	struct btrfs_fs_devices *cur_devices;
@@ -6264,11 +6251,19 @@ struct btrfs_device *btrfs_find_device(s
 	while (cur_devices) {
 		if (!fsid ||
 		    !memcmp(cur_devices->fsid, fsid, BTRFS_FSID_SIZE)) {
-			device = find_device(cur_devices, devid, uuid);
-			if (device)
-				return device;
+			list_for_each_entry(device, &cur_devices->devices,
+					    dev_list) {
+				if (device->devid == devid &&
+				    (!uuid || memcmp(device->uuid, uuid,
+						     BTRFS_UUID_SIZE) == 0))
+					return device;
+			}
+
 		}
-		cur_devices = cur_devices->seed;
+		if (seed)
+			cur_devices = cur_devices->seed;
+		else
+			return NULL;
 	}
 	return NULL;
 }
@@ -6502,7 +6497,7 @@ static int read_one_chunk(struct btrfs_f
 				   btrfs_stripe_dev_uuid_nr(chunk, i),
 				   BTRFS_UUID_SIZE);
 		map->stripes[i].dev = btrfs_find_device(fs_info, devid,
-							uuid, NULL);
+							uuid, NULL, true);
 		if (!map->stripes[i].dev &&
 		    !btrfs_test_opt(fs_info, DEGRADED)) {
 			free_extent_map(em);
@@ -6637,7 +6632,7 @@ static int read_one_dev(struct btrfs_fs_
 			return PTR_ERR(fs_devices);
 	}
 
-	device = btrfs_find_device(fs_info, devid, dev_uuid, fs_uuid);
+	device = btrfs_find_device(fs_info, devid, dev_uuid, fs_uuid, true);
 	if (!device) {
 		if (!btrfs_test_opt(fs_info, DEGRADED)) {
 			btrfs_report_missing_device(fs_info, devid, dev_uuid);
@@ -7210,7 +7205,7 @@ int btrfs_get_dev_stats(struct btrfs_fs_
 	int i;
 
 	mutex_lock(&fs_devices->device_list_mutex);
-	dev = btrfs_find_device(fs_info, stats->devid, NULL, NULL);
+	dev = btrfs_find_device(fs_info, stats->devid, NULL, NULL, true);
 	mutex_unlock(&fs_devices->device_list_mutex);
 
 	if (!dev) {
--- a/fs/btrfs/volumes.h.orig1	2019-11-30 20:57:29.855656670 -0800
+++ b/fs/btrfs/volumes.h	2019-11-30 21:42:56.701937513 -0800
@@ -448,7 +448,7 @@ int btrfs_num_copies(struct btrfs_fs_inf
 int btrfs_grow_device(struct btrfs_trans_handle *trans,
 		      struct btrfs_device *device, u64 new_size);
 struct btrfs_device *btrfs_find_device(struct btrfs_fs_info *fs_info, u64 devid,
-				       u8 *uuid, u8 *fsid);
+				       u8 *uuid, u8 *fsid, bool seed);
 int btrfs_shrink_device(struct btrfs_device *device, u64 new_size);
 int btrfs_init_new_device(struct btrfs_fs_info *fs_info, const char *path);
 int btrfs_init_dev_replace_tgtdev(struct btrfs_fs_info *fs_info,
