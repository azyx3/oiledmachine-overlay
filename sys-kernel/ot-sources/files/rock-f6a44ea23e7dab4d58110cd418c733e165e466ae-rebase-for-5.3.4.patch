--- a/drivers/gpu/drm/amd/amdkfd/kfd_doorbell.c.orig	2019-10-24 10:55:13.087671417 -0700
+++ b/drivers/gpu/drm/amd/amdkfd/kfd_doorbell.c	2019-10-24 11:01:49.509896507 -0700
@@ -126,20 +126,50 @@ void kfd_doorbell_fini(struct kfd_dev *k
 		iounmap(kfd->doorbell_kernel_ptr);
 }
 
+static void kfd_doorbell_open(struct vm_area_struct *vma)
+{
+	/* Don't track the parent's PDD in a child process. We do set
+	 * VM_DONTCOPY, but that can be overridden from user mode.
+	 */
+	vma->vm_private_data = NULL;
+}
+
+static void kfd_doorbell_close(struct vm_area_struct *vma)
+{
+	struct kfd_process_device *pdd = vma->vm_private_data;
+
+	if (!pdd)
+		return;
+
+	mutex_lock(&pdd->qpd.doorbell_lock);
+	pdd->qpd.doorbell_vma = NULL;
+	/* Remember if the process was evicted without doorbells
+	 * mapped to user mode.
+	 */
+	if (pdd->qpd.doorbell_mapped == 0)
+		pdd->qpd.doorbell_mapped = -1;
+	mutex_unlock(&pdd->qpd.doorbell_lock);
+}
+
 static int kfd_doorbell_vm_fault(struct vm_fault *vmf)
 {
-	struct kfd_process *process = vmf->vma->vm_private_data;
+	struct kfd_process_device *pdd = vmf->vma->vm_private_data;
+
+	if (!pdd)
+		return VM_FAULT_SIGBUS;
 
-	pr_debug("Process %d doorbell vm page fault\n", process->pasid);
+	pr_debug("Process %d doorbell vm page fault\n", pdd->process->pasid);
 
-	kfd_process_remap_doorbells_locked(process);
+	kfd_process_remap_doorbells_locked(pdd->process);
 
-	kfd_process_schedule_restore(process);
+	kfd_process_schedule_restore(pdd->process);
 
 	return VM_FAULT_NOPAGE;
 }
 
 static const struct vm_operations_struct kfd_doorbell_vm_ops = {
+	.open = kfd_doorbell_open,
+	.close = kfd_doorbell_close,
 	.fault = kfd_doorbell_vm_fault,
 };
 
