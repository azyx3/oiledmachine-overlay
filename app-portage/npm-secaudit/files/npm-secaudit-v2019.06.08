#!/bin/bash

# This package just checks but doesn't do updating.  Portage is responsible for that
# to allow for the package manager to erase update cruft created by npm.
#
# This script is a /etc/portage/postsync.d/ hook handler
#
# It is designed to check every registered npm package and it's bundled dependencies.
# If it finds a package with a security vulerability, it will suggest to the user
# to re-emerge the package.  A package that uses electron-app.eclass or
# npm-secaudit.eclass in the oiledmachine-overlay will run `npm audit fix --force`
# to replace the vulnerable internal dependency.

H_INFO="
Copyright 2019 Orson Teodoro
License: Dual licensed under MIT or GPL2
"
H_HELP="
$(basename $BASH_SOURCE) <args>

Generates a package set for you to update affected packages.

args:
	-sc, --critical			scan for critical vulnerabilities only
	-sh, --high			scan for high and above vulnerabilities
	-sm, --moderate			scan for moderate and above vulnerabilities
	-sl, --low			scan for low and above vulnerabilities
	-l, --long			perform a long scan
	-h, --help			prints all the supported commands
	-ver, --version			version info
	-v, --verbose			prints the full vulnerability report
	-d, --debug			prints debug messages
"

G_VERBOSE=""
G_DEBUG=""
G_SCAN_MODE="low"
G_LONG_SCAN=""

for arg in $@ ; do
	case "$arg" in
		-sc|--critical)
			G_SCAN_MODE="critical"
			;;
		-sh|--high)
			G_SCAN_MODE="high"
			;;
		-sm|--moderate)
			G_SCAN_MODE="moderate"
			;;
		-sl|--low)
			G_SCAN_MODE="low"
			;;
		-l|--long)
			G_LONG_SCAN="1"
			;;
		--version|-version|-ver)
			echo "${H_INFO}"
			exit
			;;
		--help|-help|-h)
			echo "${H_HELP}"
			exit
			;;
		--verbose|-verbose|-v)
			G_VERBOSE="1"
			;;
		--debug|-debug|-d)
			G_DEBUG="1"
			G_VERBOSE="1"
			;;
	esac
done

function einfo() {
	echo ">>> $1"
}

function dinfo() {
	case "$G_DEBUG" in
		1)
			echo ">>> $1"
			;;
		*)
			true
			;;
	esac
}

# location of registered npm packages
NPM_APPS="/var/lib/portage/npm-packages"
INSECURE_SET_DIR="/etc/portage/sets/"
INSECURE_SET_FN="npm-security-update"
INSECURE_SET_FP="${INSECURE_SET_DIR}/${INSECURE_SET_FN}"

CHECK_PERIOD="$((60*60*24*1))" #seconds

function init() {
	mkdir -p "${INSECURE_SET_DIR}"
	touch "${INSECURE_SET_FP}"

	# remove blank lines
	sed -i '/^$/d' "${NPM_APPS}"
}

function raudit() {
	local result="0"
	local p="$1"
	local path="$2"
	echo -e "\n>>> Checking ${p}"
	dinfo "Performing recursive package-lock.json audit"
	L=$(find . -name "package-lock.json")
	for l in $L; do
		if [[ "${LONG_SCAN}" != "1" && "${result}" == "1" ]] ; then
			dinfo "Skipping long scan"
			break
		elif [[ "${LONG_SCAN}" == "1" ]] ; then
			dinfo "Continuing long scan"
		fi
		pushd $(dirname $l) >/dev/null
		dinfo "Path: ${path}/${l}"
		[ -e /tmp/npm-secaudit-result ] && rm /tmp/npm-secaudit-result
		if [[ "${G_VERBOSE}" == "1" ]]; then
			npm audit &> /tmp/npm-secaudit-result
			cat /tmp/npm-secaudit-result
		else
			npm audit &> /tmp/npm-secaudit-result
		fi
		local t
		cat /tmp/npm-secaudit-result | grep "ELOCKVERIFY" >/dev/null
		if [[ "$?" == "0" ]] ; then
			dinfo "Ignoring results of packages referencing pruned dev packages.  You can re-emerge to verify if has a vulnerability."
		else
			cat /tmp/npm-secaudit-result | grep -F "require manual review" >/dev/null
			local result_found1="$?"
			cat /tmp/npm-secaudit-result | grep -F "npm audit fix" >/dev/null
			local result_found2="$?"
			cat /tmp/npm-secaudit-result | grep -F "Critical" >/dev/null
			local result_critical="$?"
			cat /tmp/npm-secaudit-result | grep -F "High" >/dev/null
			local result_high="$?"
			cat /tmp/npm-secaudit-result | grep -F "Moderate" >/dev/null
			local result_moderate="$?"
			cat /tmp/npm-secaudit-result | grep -F "Low" >/dev/null
			local result_low="$?"
			if [[ "${result_found1}" == "0" || "${result_found2}" == "0" ]] ; then
				if [[ "${result_critical}" == "0" && "${G_SCAN_MODE}" == "critical" ]] ; then
					dinfo "Critical vulnerability found"
					result="1"
				elif [[ ( "${result_high}" == "0" || "${result_critical}" == "0" ) && "${G_SCAN_MODE}" == "high" ]] ; then
					dinfo "High and above vulnerability found"
					result="1"
				elif [[ ( "${result_moderate}" == "0" || "${result_high}" == "0" || "${result_critical}" == "0" ) && "${G_SCAN_MODE}" == "moderate" ]] ; then
					dinfo "Moderate and above vulnerability found"
					result="1"
				elif [[ ( "${result_low}" == "0" || "${result_moderate}" == "0" || "${result_high}" == "0" || "${result_critical}" == "0" ) && "${G_SCAN_MODE}" == "low" ]] ; then
					dinfo "Low and above vulnerability found"
					result="1"
				fi
			fi
		fi
		popd >/dev/null
	done
	dinfo "Auditing security done"
	echo ""
	return ${result}
}

function check() {
	echo "Checking npm packages and Electron apps for vulnerabilities please wait..."
	echo "" > "${INSECURE_SET_FP}"

	while read -r line ; do
		local p=$(echo "${line}" | cut -f1)
		local path=$(echo "${line}" | cut -f2)

		pushd "${path}" >/dev/null
		raudit "${p}" "${path}"
		if [[ "$?" == "0" ]] ; then
			dinfo "Package ${p} is good."
		else
			dinfo "Package ${p} needs to be updated and has been placed in the @${INSECURE_SET_FN} set."
			echo "${p}" >> "${INSECURE_SET_FP}"
		fi
		popd >/dev/null
	done < "${NPM_APPS}"
}

function summary() {
	# remove blank lines
	sed -i '/^$/d' "${INSECURE_SET_FP}"

	local n_insecure=$(wc -l ${INSECURE_SET_FP} | cut -f1 -d' ')
	local fsz=$(wc -c ${INSECURE_SET_FP} | cut -f1 -d' ')
	dinfo "n_insecure=$n_insecure"
	dinfo "fsz=$fsz"
	if (( $n_insecure > 0 && $fsz > 1 )); then
		D=$(cd "$(dirname "$0")" ; pwd -P)
		einfo "npm-secaudit found ${n_insecure} insecure apps.  Please update immediately with \`emerge @${INSECURE_SET_FN}\`."
		einfo "For full report, run with \`${D}/$(basename $BASH_SOURCE) -v\`."
	else
		einfo "No insecure npm/electron apps found."
	fi
}

function main() {
	init
	check
	summary
}

main
