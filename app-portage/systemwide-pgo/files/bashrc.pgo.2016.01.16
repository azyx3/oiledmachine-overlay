#!/bin/bash
_INFO="
Copyright 2016 Orson Teodoro
License: Dual licensed under MIT or GPL2
"
PGO_WHITELIST="/etc/portage/package.pgo.whitelist"
PGO_PACKAGE_PHASES="/etc/portage/package.pgo.phases"
PGO_SIMULATION_WINDOW="$((60*60*24*7))" #seconds

if [[ "$EBUILD_PHASE_FUNC" == "pkg_setup" ]]; then
	einfo "pkg_setup"
	touch "${PGO_PACKAGE_PHASES}"

	cat "${PGO_WHITELIST}" | grep "${CATEGORY}/${PN}" | grep -v "#" &>/dev/null
	if [[ "$?" == "0" ]]; then
		V=$(clang -v 2>&1 | grep -o "version [0-9.]*" | sed "s|version ||g")
		if [[ "$V" < "3.7.0" ]]; then
			die "System-wide PGO requires clang/llvm 3.7.0.  Please upgrade."
		fi

		einfo "Package is in PGO whitelist [OK]"
		cat "${PGO_PACKAGE_PHASES}" | grep "${CATEGORY}/${PF}" &>/dev/null
		if [[ "$?" != "0" ]]; then
			einfo "Detected new package to be instrumented."
			echo "=${CATEGORY}/${PF} 1" >> "${PGO_PACKAGE_PHASES}"
		else
			PGO_PACKAGE=$(cat "${PGO_PACKAGE_PHASES}" | grep "${CATEGORY}/${PF}")
			IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
			PGO_PACKAGE_PHASE="${ROW[1]}"

			if [[ "${PGO_PACKAGE_PHASE}" == "*" ]]; then
				PGO_PACKAGE=$(cat "${PGO_PACKAGE_PHASES}" | grep "${CATEGORY}/${PF}")
				IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
				A=$(find /var/lib/pgo -name "*.gcda" | sed -r -e "s|/var/tmp/ccache/././[^\.]+.o.tmp.[^\.]+.[0-9]*[.]?gcda||g" | sed "s|\./|=|g" | sed "s|/var/lib/pgo||g" | sed "s|^/|=|g" | uniq)
				B=$(find /var/lib/pgo -name "*.profraw" | sed -r -e "s|/default.profraw||g" | sed "s|\./|=|g" | sed "s|/var/lib/pgo||g" | sed "s|^/|=|g" )
			        if [[ "${A} ${B}" =~ "${ROW[0]}"  ]]; then
					if [[ "$((${ROW[2]}+${PGO_SIMULATION_WINDOW}))" < "$(date +%s)" ]]; then
					        if [[ "${CC}" == "clang" || "${CXX}" == "clang++" ]]; then
							LST=$(ls ${ROOT}/var/lib/pgo/${CATEGORY}/${PF}/default.profraw)
							echo "${LST}" | grep ".profraw" &>/dev/null
							if [[ "$?" == "0" ]]; then
								einfo "Detected clang/LLVM PGO profiling data."
								A="=${CATEGORY}/${PF} *" B="=${CATEGORY}/${PF} 3" perl -p -i -e 's|\Q$ENV{'A'}\E|$ENV{'B'}|g' "${PGO_PACKAGE_PHASES}"
							else
								die "No profiling data detected."
							fi
						elif [[ "${CC}" == "gcc" || "${CXX}" == "g++" ]]; then
							find ${ROOT}/var/lib/pgo/${CATEGORY}/${PF} -name *gcda &>/dev/null
							if [[ "$?" == "0" ]]; then
								einfo "Detected gcc/g++ profiling data."
								A="=${CATEGORY}/${PF} *" B="=${CATEGORY}/${PF} 3" perl -p -i -e 's|\Q$ENV{'A'}\E|$ENV{'B'}|g' "${PGO_PACKAGE_PHASES}"
							else
								die "No profiling data detected."
							fi
					        fi
					else
						T="$((${ROW[2]}+${PGO_SIMULATION_WINDOW}))"
						einfo "You package simulation time window has not expired.  You may emerge after "$(date --date="@${T}" "+%a %b %d %r %Z %Y")
						die
					fi
			                true
				else
					die "Your package has not been simulated.  Remove the package from /etc/portage/package.pgo.whitelist or simulate it."
			        fi
			fi
		fi

		if [[ "${CC}" == "gcc" || "${CXX}" == "g++"  ]]; then
			grep -r -e "SANDBOX_WRITE" /etc/sandbox.d/* | grep "/var/lib/pgo"
			if [[ "$?" != "0" ]]; then
				die "You need to add /var/lib/pgo to SANDBOX_WRITE in /etc/sandbox.d/00default"
			fi
		fi
	fi
fi

if [[ "$EBUILD_PHASE_FUNC" == "src_configure" ]]; then
	einfo "src_configure"

	cat "${PGO_WHITELIST}" | grep "${CATEGORY}/${PN}" | grep -v "#" &>/dev/null
	if [[ "$?" == "0" ]]; then
		PGO_PACKAGE=$(cat "${PGO_PACKAGE_PHASES}" | grep "${CATEGORY}/${PF}")
		IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
		PGO_PACKAGE_PHASE="${ROW[1]}"
		if [[ "${#PGO_PACKAGE_PHASE}" != "0" ]]; then
			einfo "PGO Phase: ${PGO_PACKAGE_PHASE}"
		fi

	        INSTRUMENT_CFLAGS=""
	        INSTRUMENT_LDFLAGS=""
	        INSTRUMENT_LIBS=""
	        PROFILE_DATA_CFLAGS=""
	        PROFILE_DATA_LDFLAGS=""
	        PROFILE_DATA_LIBS=""
	        if [[ "${CC}" == "gcc" || "${CXX}" == "g++" ]]; then
	                INSTRUMENT_CFLAGS="-fprofile-generate=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
	                INSTRUMENT_LDFLAGS="-fprofile-generate=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
	                INSTRUMENT_LIBS=""

	                PROFILE_DATA_CFLAGS="-fprofile-use=${ROOT}/var/lib/pgo/${CATEGORY}/${PF} -fprofile-correction"
	                PROFILE_DATA_LDFLAGS="-fprofile-use=${ROOT}/var/lib/pgo/${CATEGORY}/${PF} -fprofile-correction"
	                PROFILE_DATA_LIBS=""
	        elif [[ "${CC}" == "clang" || "${CXX}" == "clang++" ]]; then
	                INSTRUMENT_CFLAGS="-fprofile-generate=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
	                INSTRUMENT_LDFLAGS="-fprofile-generate=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
	                INSTRUMENT_LIBS=""
			#if [[ "${PN}" == "chromium" ]]; then
		        #        INSTRUMENT_LIBS="-lconv"
		                #INSTRUMENT_LIBS="-lgcov"
			#	true
			#fi

	                PROFILE_DATA_CFLAGS="-fprofile-use=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
	                PROFILE_DATA_LDFLAGS="-fprofile-use=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
	                PROFILE_DATA_LIBS=""
	        else
	                die "Check your compiler CC and CXX must be clang/clang++ or gcc/g++."
	        fi

		if [[ "${PGO_PACKAGE_PHASE}" == "1" ]]; then
			einfo "Using PGO instrumentation flags to trace user activity..."
			CFLAGS="${CFLAGS} ${INSTRUMENT_CFLAGS}"
			CXXFLAGS="${CXXFLAGS} ${INSTRUMENT_CFLAGS}"
			CPPFLAGS="${CPPFLAGS} ${INSTRUMENT_CFLAGS}"
			LDFLAGS="${LDFLAGS} ${INSTRUMENT_LDFLAGS}"
			LIBS="${LIBS} ${INSTRUMENT_LIBS}"
		fi

		if [[ "${PGO_PACKAGE_PHASE}" == "3" ]]; then
			einfo "Using the PGO profile and PGO flags to optimize package..."
			CFLAGS="${CFLAGS} ${PROFILE_DATA_CFLAGS}"
			CXXFLAGS="${CXXFLAGS} ${PROFILE_DATA_CFLAGS}"
			CPPFLAGS="${CPPFLAGS} ${PROFILE_DATA_CFLAGS}"
			LDFLAGS="${LDFLAGS} ${PROFILE_DATA_LDFLAGS}"
			LIBS="${LIBS} ${PROFILE_DATA_LIBS}"
		fi
	fi
fi

if [[ "$EBUILD_PHASE_FUNC" == "src_compile" ]]; then
	einfo "src_compile"
	cat "${PGO_WHITELIST}" | grep "${CATEGORY}/${PN}" | grep -v "#" &>/dev/null
	if [[ "$?" == "0" ]]; then
		if [[ "${PGO_PACKAGE_PHASE}" == "1" ]]; then
			einfo "Compiling with PGO..."
		fi
	fi
fi

if [[ "$EBUILD_PHASE_FUNC" == "src_install" ]]; then
	true
fi

if [[ "$EBUILD_PHASE_FUNC" == "pkg_preinst" ]]; then
	true
fi

if [[ "$EBUILD_PHASE_FUNC" == "pkg_postinst" ]]; then
	einfo "pkg_postinst"

	cat "${PGO_WHITELIST}" | grep "${CATEGORY}/${PN}" | grep -v "#" &>/dev/null
	if [[ "$?" == "0" ]]; then
		PGO_PACKAGE=$(cat "${PGO_PACKAGE_PHASES}" | grep "${CATEGORY}/${PF}")
		IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
		PGO_PACKAGE_PHASE="${ROW[1]}"

		if [[ "${#PGO_PACKAGE_PHASE}" != "0" ]]; then
			einfo "PGO Phase: ${PGO_PACKAGE_PHASE}"
		fi
		if [[ "${PGO_PACKAGE_PHASE}" == "1" ]]; then
			einfo "Done with phase 1"
			A="=${CATEGORY}/${PF} 1" B="=${CATEGORY}/${PF} * $(date +%s)" perl -p -i -e 's|\Q$ENV{'A'}\E|$ENV{'B'}|g' "${PGO_PACKAGE_PHASES}"
			rm -rf "${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
			mkdir -p "${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
			chgrp -R wheel "${ROOT}/var/lib/pgo"
			chmod -R g+w "${ROOT}/var/lib/pgo"
			einfo ""
			elog "You must run the ${PF} package then re-emerge the package to complete the optimization."
			einfo ""
			einfo "After about a week or required duration of regular usage, re-emerge this package."
			einfo "You may simulate as many times you want before re-emerging."
			einfo ""
		elif [[ "${PGO_PACKAGE_PHASE}" == "3" ]]; then
			einfo "Done with phase 3"
			A="=${CATEGORY}/${PF} 3" B="=${CATEGORY}/${PF} 4" perl -p -i -e 's|\Q$ENV{'A'}\E|$ENV{'B'}|g' "${PGO_PACKAGE_PHASES}"
			einfo "The package is now PGO optimized."
			echo "${CATEGORY}/${PF}" >> "${ROOT}"/etc/portage/package.pgo.finished
		fi
	fi

	#echo "The list of simulated packages:"
	A=$(find /var/lib/pgo -name "*.gcda" | sed -r -e "s|/var/tmp/ccache/././[^\.]+.o.tmp.[^\.]+.[0-9]*[.]?gcda||g" | sed "s|\./|=|g" | sed "s|/var/lib/pgo||g" | sed "s|^/|=|g" | uniq)
	B=$(find /var/lib/pgo -name "*.profraw" | sed -r -e "s|/default.profraw||g" | sed "s|\./|=|g" | sed "s|/var/lib/pgo||g" | sed "s|^/|=|g" )
	#einfo "${A}"
	#einfo "${B}"

	einfo "The following packages still need to be simulated."
	while read PGO_PACKAGE; do
		IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
	        if [[ "${A} ${B}" =~ "${ROW[0]}"  ]]; then
			if [[ "$((${ROW[2]}+${PGO_SIMULATION_WINDOW}))" < "$(date +%s)" ]]; then
				true #ready to emerge
			else
				if [[ "${ROW[1]}" == "*" ]]; then
			                einfo "  ${ROW[0]}" #needs more simulation time
				fi
			fi
	                true
	        else
	                einfo "  ${ROW[0]}" #not simulated
	                true
	        fi
	done < /etc/portage/package.pgo.phases

	(
		flock -n 9
		echo ""
		echo "" > /etc/portage/sets/pgo-update

		einfo ""
		einfo "The following packages are ready to be emerged to complete PGO optimization."
		while read PGO_PACKAGE; do
			IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
		        if [[ "${A} ${B}" =~ "${ROW[0]}"  ]]; then
				if [[ "$((${ROW[2]}+${PGO_SIMULATION_WINDOW}))" < "$(date +%s)" ]]; then
					if [[ "${ROW[1]}" == "*" ]]; then
				                einfo "  ${ROW[0]}" #is simulated
						echo "${ROW[0]}" >> /etc/portage/sets/pgo-update
					fi
				fi
		                true
		        else
		                true
		        fi
		done < /etc/portage/package.pgo.phases
	) 9>/etc/portage/package.pgo.pgo-update.lock
	einfo "Use emerge @pgo-update to emerge these packages."
	einfo ""

	#sleep 10
fi
